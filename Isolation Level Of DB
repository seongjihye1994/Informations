# Transaction 과 Isolation Level

**DB는 트랜잭션 단위로 처리**된다.

## 트랜잭션 (Transaction)

만들고 있는 프로젝트의 로직중에 DB table에 정보를 insert하는 로직이 있다. 

table은 ***정규화*** 되어있으며 A, B, C 테이블에 차례대로 테이터를 insert한다고 하자. 

테이블이 쪼개져 있으므로 테이블간의 ***데이터 정합성을 유지***하는게 중요하다. 

만약 A, B에는 insert하고 C에 insert 하기전 서버가 에러 또는 특정 작업에 의해 정상적으로 처리하지 못하는 상황이 되었다고 하자.

그렇다면 결과적으로 이 데이터는 믿을 수 없는 데이터가 된다. 

이를 해결하기 위한 방법으로 DB는 ***All Or Nothing*** 전략을 취한다.

즉, **A, B, C에 정상적으로 insert**하거나 **아무곳도 insert하지 않는 것**이다.

DB에서는 이 전략을 취하기 위해 ***트랜잭션***이라는 단위를 사용한다.

트랜잭션 단위는 ‘***나누어지지 않는 최소한의 단위’***라고 정의한다.

위 로직에 ***트랜잭션이 적용되면 오류가 났다면 A, B에 insert한 것을 Rollback함으로써 Nothing으로 전략***을 취한다.

트랜잭션은 **4가지의 특징**을 가진다.

이를 앞글자만따서 ACID라고 부른다.

1. **원자성(Atomicity)**
    - 트랜잭션은 더 이상 분해가 불가능한 업무의 최소 단위이므로, ***전부 처리***되거나 ***아예 하나도 처리되지 않아야*** 한다.
    
2. **일관성(Consistency)**
    - 일관된 상태의 데이터베이스에서 하나의 트랜잭션을 성공적으로 완료하고 나면 그 데이터베이스는 ***여전히 일관된 상태***여야 한다.
        
        즉, 트랜잭션 실행의 결과로 데이터베이스 상태가 모순되지 않아야 한다.
        
    
3. **격리성(Isolation)**
    - 실행 중인 트랜잭션의 중간 결과를 ***다른 트랜잭션이 접근할 수 없***다.
    
4. **영속성(Durability)**
    - 트랜잭션이 일단 그 실행을 성공적으로 완료하면 그 결과는 데이터베이스에 ***영속적으로 저장***된다.

## 트랜잭션 격리성 (Transaction Isolation)

트랜잭션의 격리성에 대해서 조금 더 깊게 보도록 하자.

격리성은 앞서 살펴보았듯이 `*실행 중인 트랜잭션의 중간결과를 다른 트랜잭션이 접근할 수 없다.*`라는 정의를 가지고 있다.

막연하게 접근할 수 없다라기 보다는 일반적으로 ***접근 레벨***이 있으며 DB에 따라 설정이 가능하다.

이런 격리성은 강하게 처리할 수 있으며 반대로 약하게 처리할 수도 있다. 

아래에서 조금 더 살펴보자.

## 격리성으로 인해 나타날 수 있는 문제점

격리성으로 인해 나타날 수 있는 **문제점**은 일반적으로 

1. ***Dirty Read***
2. ***Non-Repeatable Read***
3. ***Phantom Read*** 

3가지라고 한다.

### 1. Dirty Read

➡️ Dirty Read는 ***다른 트랜잭션에 의해 수정됐지만 아직 커밋되지 않은 데이터를 읽는 것***을 말한다.

(아래의 이미지 참고)

이런 경우 Transaction_1이 정상 처리되지 않고 ***Rollback*** 될 수 있다.

이럴 경우 그 값을 이미 읽은 Transaction_2는 ***잘못된 값을 가지고 본인의 로직을 처리하는 상태***에 놓이게 된다.

[T1이 YKH를 Insert 후 Commit 하기 전 T2가 Select를 하고있다.
이 경우, T1의 YKH Insert는 Rollback 될 수 있다.](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbgjwus%2FbtqKbV7Q7go%2FDwXX4Bgjl39Gu1FO78SkJk%2Fimg.png)

T1이 YKH를 Insert 후 Commit 하기 전 T2가 Select를 하고있다.
이 경우, T1의 YKH Insert는 Rollback 될 수 있다.

### 2. **Non-Repeatable Read**

**➡️** Non-Repeatable Read는 ***한 트랜잭션 내에서 같은 Key를 가진 Row를 두 번 읽었는데 그 사이에 값이 변경되거나 삭제되어 결과가 다르게 나타나는 현상***을 말한다.

[T2가 SABARADA를 조회한 후 다시 같은 SABARADA를 조회하려고 하는 사이에, T1이 SABARADA를 YKH로 수정해버렸다.](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FOAHDX%2FbtqJ8fZ5yJr%2FAKYMiEi3XQ7m71RasvPXF1%2Fimg.png)

T2가 SABARADA를 조회한 후 다시 같은 SABARADA를 조회하려고 하는 사이에, T1이 SABARADA를 YKH로 수정해버렸다.

### 3. **Phantom Read**

**➡️ *한 트랜잭션 내에서 같은 쿼리를 두 번 수행했는데, 첫 번째 쿼리에서 없던 유령(Phantom) 레코드가 두 번째 쿼리에서 나타나는 현상***을 말한다.

[T1이 YKH를 인서트 한 후 커밋하기 전, T2가 테이블을 조회하면 YKH는 커밋하기 전이라 보이지 않는다.
이후, T1이 커밋을 한 후 T2가 다시 테이블을 조회하면 YKH가 추가되어 있다.](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxunmZ%2FbtqJ0pJFsmi%2F2KhKRBkksKwyIOWbhaeVBk%2Fimg.png)

T1이 YKH를 인서트 한 후 커밋하기 전, T2가 테이블을 조회하면 YKH는 커밋하기 전이라 보이지 않는다.
이후, T1이 커밋을 한 후 T2가 다시 테이블을 조회하면 YKH가 추가되어 있다.

여기서 Phantom Read와 Non-Repeatuable Read를 햇갈릴 수 있다. 

Non-Repeatable Read는 ***1개***의 Row의 데이터의 값이 변경되는 것이며, Phanton Read는 ***다건***을 요청하는 것에 대해서 데이터의 값이 변경되는 것이다.

## 지정할 수 있는 격리성 수준

그렇다면 이제 DataBase에서 제공하는 격리성 수준(Transaction Isolation Level)에 대해서 알아보도록 하자.

아래의 4개의 격리수준은 ANSI/ISO SQL 표준(SQL92)에서 정의한 내용이다.

### 1. Read Uncommitted

➡️ **트랜잭션에서 처리 중인 *아직 커밋되지 않은 데이터를 다른 트랜잭션이 읽는 것을 허용***한다. 

해당 수준에서는 `Dirty Read`, `Non-Repeatable Read`, `Phantom Read`가 일어날 수 있다. 

이 설정은 **정합성에 문제가 있기 때문에 권장하는 설정은 아니다.**

### 2. Read Committed

➡️ **트랜잭션이 *커밋되어 확정된 데이터만 다른 트랜잭션이 읽도록 허용***한다.

따라서 `Dirty Read`의 발생 가능성을 막는다. 

**커밋 되지 않은 데이터에 대해서는 실제 DB 데이터가 아닌 Undo 로그에 있는 이전 데이터를 가져오는 것**이다.

하지만 이 역시 여전히 `Non-Repeatable Read`와 `Phanton Read`에 대해서는 발생 가능성이 있다.

### 3. Repeatable Read

➡️ 트랜잭션내에서 **삭제, 변경에 대해서 Undo 로그**에 넣어두고 ***앞서 발생한 트랜잭션에 대해서는 실제 데이터가 아닌 Undo 로그에 있는 백업 데이터를 읽게*** 한다.

이렇게 함으로써 트랜잭션 중 값의 변경에 대해서 일정한 값으로 처리할 수 있다. 

이렇게하면 삭제와 수정에 대해서 트랜잭션내에서 불일치를 가져오던 `Non-Reapeatable Read`를 해소할 수 있다.
