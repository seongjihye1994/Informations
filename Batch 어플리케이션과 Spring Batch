# Batch 어플리케이션과 Spring Batch

## Batch 정의

**일괄 처리를 위한 오픈소스 프레임워크**이다.

**로깅 / 추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리** 등

대용량 레코드 처리에 필수적인 재사용 가능한 기능을 제공한다.

**최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 배치 작업을 가능**하게 하는

고급 기술 서비스 및 기능을 제공한다.

## Batch 목적 및 사례

만약 매일 어제의 데이터를 집계해야 한다면?

웹이라면 톰캣 + spring mvc 로 뚜닥뚜닥 코드 + SQL 조합으로 어찌저찌해서 보내겠지만

집계 데이터가 너무 커서 읽는데 서버 부하가 많이 생긴다면?

CPU, I/O 등의 자원을 다 써버리니… 부하가 올 수 밖에 없다.

그리고 이 집계 기능은 하루에 한 번밖에 수행하지 않는다.

근대 이 한번밖에 수행하지 않는 기능 때문에 API를 만드는건 너무 낭비가 아닐까?

또!

데이터가 너~~무 많아서 처리중에 실패가 났는데

한.. 5만번째에서 실패했다면, 5만 1번째부터 다시 실행할 수 있게 하면 얼마나 좋을까?

또!

누군가 같은 파라미터로 같은 함수를 실행하면 실패하게 하는 기능이 있다면 얼마나 좋을까?

이런 단발성 대용량 데이터를 처리하는 어플리케이션이 배치 어플리케이션이다.

즉, 배치 어플리케이션을 사용하면 위에서 말 한것들이 모두 가능해진다~!

배치 어플리케이션 중에서 Spring 진영의 Spring Batch를 알아보자.

배치 어플리케이션은

- ***대용량 데이터***
- ***자동화***
- ***견고성***
- ***신뢰성***
- ***성능***

이 다섯가지 조건을 만족해야 한다.

대용량의 데이터를 처리할 수 있어야 하며,

사용자 개입 없이 자동화로 처리할 수 있어야 하며,

잘못된 데이터를 다뤄도 충돌이나 중단이 없어야 하고,

뭐가 잘못되었는지 로깅이나 알림으로 추적할 수 있어야 하며,

지정한 시간 안에 처리를 완료하거나, 다른 어플리케이션을 방해하지 않도록 수행되어야 한다!

많은 거래가 이루어지는 이커머스 사이트의 경우

하루 거래건이 최소 50 ~ 100만 정도이다.

이럴 경우 이와 관련된 데이터는 최소 100~200만 row 이상이고,

한 달이면 5000만 ~ 1억까지 된다.

이 많은 데이터를 실시간 집계 쿼리로 조회하기엔 서버 부하가 너무 심해진다.

그래서 **매일 새벽 전날의 매출 집계 데이터를 만들어서**

**외부 요청이 올 경우 미리 만들어둔 집계 데이터를 바로 전달하면**

**성능과 부하를 모두 잡을 수 있다.**

## Spring Batch

Spring 프레임워크의 DI + AOP + 추상화 기능과 Accenture의 배치 노하우가 합쳐진 

프래임워크이다.

Spring Batch 4.0 (Spring Boot 2.0) 에서 지원하는 Reader & Writer는 아래와 같다.

참고로 Reader는 데이터를 읽어오는 모듈이며, Writer는 데이터를 쓰는 모듈이다.

| DataSource | 기술 | 설명 |
| --- | --- | --- |
| Database | JDBC | 페이징, 커서, 일괄 업데이트 등 사용 가능 |
| Database | Hibernate | 페이징, 커서 사용 가능 |
| Database | JPA | 페이징 사용 가능 (현재 버전에선 커서 없음) |
| File | Flat file | 지정한 구분자로 파싱 지원 |
| File | XML | XML 파싱 지원 |

## Spring Batch 아키텍쳐

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba3fd116-ce8b-4d87-a12c-df8975af6b49/Untitled.png)

### Run Tier

- Application의 scheduling, 실행을 담당한다.
    - 스프링 배치는 따로 스케쥴링 기능은 제공하지 않는다!
    - Quartz나 Cron을 이용하도록 권고함.

### Job Tier

- 전체적인 Job의 수행을 책임진다.
    - Job 내의 각 Step을 정책에 따라 순차적으로 수행

### Application Tier

- Job을 수행하는데 필요한 Component

### Data Tier

- Database, File 등 물리적 데이터소스

## Spring Batch 와 스케쥴러의 차이

Spring Batch 를 통해 Batch Job을 만들었으면 이걸 주기적으로 돌려주는 무언가가 필요하다. 

배치와 스케쥴러를 혼동하는 사람들이 종종 있는데 이것은 완전히 다른 개념이다. 

**배치는 실시간으로 처리를 하는것이 아닌일괄 처리를 뜻하며 보통은 특정 시간에 행**해진다. 

이 **특정 시간을 정의해 주는 것은스케쥴러의 역할**이다.

# ref

---

[https://dalgun.dev/blog/2019-10-30/spring-batch](https://dalgun.dev/blog/2019-10-30/spring-batch)

[https://www.youtube.com/watch?v=1xJU8HfBREY](https://www.youtube.com/watch?v=1xJU8HfBREY)

[https://intrepidgeeks.com/tutorial/getting-started-with-spring-batch-example](https://intrepidgeeks.com/tutorial/getting-started-with-spring-batch-example)

[https://medium.com/myrealtrip-product/spring-batch-처음부터-시작하기-3c6a5db0646d](https://medium.com/myrealtrip-product/spring-batch-%EC%B2%98%EC%9D%8C%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-3c6a5db0646d)

[https://oingdaddy.tistory.com/38](https://oingdaddy.tistory.com/38)

[https://jojoldu.tistory.com/324](https://jojoldu.tistory.com/324)
