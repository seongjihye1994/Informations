# CPU 스케쥴링 알고리즘

## CPU 스케쥴링

CPU가 한개만 있는 상황에서 프로세스를 여러개 운영하기 위해서는

CPU에 대한 스케쥴링(관리)가 필요하다.

## CPU 스케쥴링 절차

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/228d4f59-5187-4be4-ab7f-417559379d65/Untitled.png)

생성  →  준비  →  실행  →  (대기)  →  완료

## CPU 스케쥴링 종류

### 비선점형 스케쥴링 의미

프로세스가 CPU를 점유 중이면? **CPU를 강제로 뺏을 수 없음**

딱 **필요한 문맥 교환만 일어나서 오버헤드가 적음**

but CPU를 강제로 뺏을 수 없으니, **효율성은 떨어지겠쥬?**

### 비선점형 스케쥴링 종류

<aside>
🚀 **FCFS (First Come First Served)**

</aside>

그냥 가장 먼저 손든 애한테 CPU를 주는것

**가장 먼저 CPU 사용하겠다고 요청**한 프로세스에 할당해주는 방식

작성이 간단하고 이해하기 쉬움

<aside>
🚀 **SJF (Shortest-Job-First)**

</aside>

CPU 사용 시간이 **짧은 것 부터 먼저**!

CPU 사용 시간을 고려해서 할당함

비선점에서의 SJF는 실행되고 있는 프로세스는 끝까지 실행하게 한다.

<aside>
🚀 **Priority 스케줄링**

</aside>

프로세스에 **우선순위** 넘버가 있다.

이 우선순위에 따라 CPU를 할당함.

비선점에서의 Priority는 더 높은 우선순위의 프로세스가 도착하면 레디큐에 추가된다.

기아 문제가 발생할 수 있음

기아문제? 우선순위가 낮은 프로세스는 CPU를 절대 할당받지 못할 수 도 있음 ㅠㅠ

<aside>
🚀 ****HRRN (Hightest Response-Ratio Next)**

</aside>

프로세스가 CPU를 사용하기 위해 **대기한 시간**이랑

CPU를 **사용 할 시간**을 같이 고려해서 우선순위를 정하는 방식이다.

### 선점형 스케쥴링 의미

프로세스가 CPU를 점유 중이면? **CPU를 강제로 뺏을 수 있음**

하나의 프로세스가 계속해서 CPU를 독점하고 있으면 이걸 강제로 뺏을 수 있으니

**효율적이긴 하지만**

**문맥 교환이 자주 일어나 오버헤드가 커진다.**

### 선점형 스케쥴링 종류

<aside>
🚀 **SJF (Shortest-Job-First)**

</aside>

CPU **사용 시간이 짧은 것 부터 먼저**!

CPU 사용 시간을 고려해서 할당함

선점에서의 SJF는 실행되고 있는 프로세스의 남은 시간보다 

도착한 다음 프로세스가 더 빨리 끝날 수 있다면?

도착한 다음 프로세스에 강제로 할당해버림.

<aside>
🚀 **SRT(Shortest Remaining Time)**

</aside>

 CPU를 할당받을 프로세스를 정할 때

**잔여 실행 시간이 가장 짧은** 프로세스에 CPU를 할당해주는 방식

프로세스별 처리할 작업 량이 쬐금 남은것부터 빠르게 처리하겠다는?

<aside>
🚀 **Round Robin**

</aside>

각각 프로세스에 **동일한 CPU 할당 시간**을 줌.

할당한 시간만 CPU를 사용해야 함.

만약 할당된 시간에 프로세스가 처리를 못한다? → 다음 프로세스로 넘어감!

그래서 선점형이라고 할 수 있다.

<aside>
🚀 **Multilevel Queue**

</aside>

프로세스 **성격에 따라 레디 큐를 여러개로 분리**하고

각 큐마다 우선순위를 가지고

프로세스는 처음에 배정된 **레디 큐를 벗어나지 못함.**

기아 현상이 발생할 수 있음

<aside>
🚀 **Mltilevel Feedback Queue (MFQ)**

</aside>

멀티 레벨 큐랑 동일하지만

프로세스는 **최초에 배정된 레디 큐를 벗어날 수 있다~!**

멀티 레벨 큐의 단점인 기아 현상을 해결할 수 있다.

## 정리

CPU가 한정적인 상황에서 프로세스를 여러개 띄워야 하는 상황에서는 CPU에 대한 관리가 필요하다.

비선점형 스케쥴링과 선점형 스케쥴링이 있다.

비선점형 스케쥴링은 프로세스가 CPU를 사용중이면 

강제로 뺏을 수 없음 → 문맥교환 적음 → 오버헤드 적음 → 효율성 떨어짐

선점형 스케쥴링은 프로세스가 CPU를 사용중이면

강제로 뺏을 수 있음 → 문맥교환 많음 → 오버헤드 많음 → 효율성 높아짐

각각의 종류는 아래와 같다.

| 비선점 | 선점 |
| --- | --- |
| FCFS | RR |
| SJF | SJF |
| HRRN | SRTF |
|  | 다단계 큐 |
|  | 다단계 피드백 큐 |
|  | RM |
|  | EDF |

## ref

---

[https://code-lab1.tistory.com/45](https://code-lab1.tistory.com/45)

[https://velog.io/@sunho6824/스케줄링-알고리즘-oql72q79](https://velog.io/@sunho6824/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-oql72q79)

[https://www.crocus.co.kr/1373](https://www.crocus.co.kr/1373)

[https://dhkdn9192.github.io/computer_science/cpu-scheduling-algorithm/](https://dhkdn9192.github.io/computer_science/cpu-scheduling-algorithm/)
