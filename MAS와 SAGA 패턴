# MAS와 SAGA 패턴

## Micro Service Architecture

하나의 큰 어플리케이션을 여러개의 작은 어플리케이션으로 쪼개어

변경과 조합이 가능하도록 만든 아키텍쳐이다.

### 모놀로틱 아키텍쳐와 마이크로 서비스 아키텍쳐

![모놀로틱 아키텍쳐 VS 마이크로서비스 아키텍쳐](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08fb9a7a-093c-4ac6-957f-ecf110195ccd/Untitled.png)

모놀로틱 아키텍쳐 VS 마이크로서비스 아키텍쳐

모놀로틱 아키텍쳐는 소프트웨어의 모든 구성요소가 한 프로젝트에 떄려밖혀 있는 서비스 구조이다.

프로젝트 규모가 작으면 모놀로틱이 유지보수하기는 편하다.

하지만, 규모가 커지면 모놀로틱은 한계가 생긴다.

1. 전체 시스템 구조 파악 어려움
2. 빌드 시간 및 테스트, 배포 시간 길어짐
3. 서비스 특정 부분만 Scale-Out 하기 어려움
4. ***부분의 장애가 전체 서비스의 장애로 이어질 수 있음 (SPOF)***

### 모놀로틱 아키텍쳐의 단점

<aside>
🚀 **SPOF 가 발생하여 시스템 전체의 장애가 생길 수 있다!**

</aside>

### 마이크로 서비스 아키텍쳐의 장점

**small service, each running in its own process + independently deployable 이 핵심!**

즉, 

<aside>
🚀 ***스스로 돌아갈 수 있는 서비스***와 ***독립적인 배포 기능***

</aside>

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2712e54c-25f6-4635-8f4a-9eb179a89f82/Untitled.png)

1. ***배포***
    1. 서비스 별 개별 배포가 가능하다.
        1. 배포 시 전체 서비스 중단이 없다. → 무중단 배포!
    2. 요구사항을 반영하여 빠르게 배포 가능하다.
2. ***확장***
    1. 특정 서비스에 대한 확장성이 유리하다. (Scale-Out)
    2. 클라우드 사용 시 적합하다.
3. ***장애 해결***
    1. 일부 장애가 전체 서비스로 확장될 가능성이 적다. → SPOF 해결
    2. 부분적으로 발생하는 장애에 대해 격리가 수월하다.
4. **그 외**
    1. 새로운 기술을 적용하기 유연하다.
    2. 서비스를 polyglot(여러 언어를 사용하여)하게 개발 및 운영할 수 있다.

### 마이크로 서비스 아키텍쳐의 단점

1. ***성능 이슈***
    1. 각 서비스 간 호출 시 API를 사용함으로, 통신 비용이나 Latency(지연시간) 이슈가 존재한다.
        
        그런데 모놀로틱에서 MSA로 넘어오는 이유가 모놀로틱으로는 더이상의 성능적인 한계를
        
        뛰어넘을 수 없을 때 넘어오는게 대부분이다.
        
        우아한 테크 컨퍼런스에서는 이벤트 발행을 통해 MSA의 성능이슈를 해결했다고 함!
        

1. ***테스트 / 트랜잭션***
    1. 서비스가 분리되어 있어 테스트와 트랜잭션의 복잡도가 증가한다.
    2. 자원이 많이 필요하다.

1. ***데이터 관리***
    1. 데이터가 여러 서비스에 분산되어 조회하기 어렵다.
    2. 데이터를 관리하기 어렵다
        1. 데이터 정합성 이슈가 발생할 수 있다.

### MSA와 SOA의 차이

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2e723272-a64b-458f-9e14-d8d1e5d7f11c/Untitled.png)

## SAGA 패턴

MSA가 언급되면 꼭 따라오는 SAGA패턴은 무엇일까?

***MSA 아키텍쳐의 단점으로 꼽은 것이 바로 트랜잭션 처리 문제***이다.

기존 모놀로틱 환경에서는 DB가 기본적으로 제공해주는 트랜잭션 기능을 이용해서

데이터 커밋이나 롤백을 통해서 데이터의 일관성을 관리할 수 있었지만,

MSA 환경으로 어플리케이션과 DB가 분산되면서 이 트랜잭션 처리를

단일 DB에서 제공하는 기능으로는 해결할 수 없게 됐다.

그래서…

여러 서비스 간에 데이터 일관성을 유지하기 위해서는

전통적인 방법인 Two-Phase Commit 방법을 사용했다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/567d4355-ee22-448f-bfbf-d16393ffaff7/Untitled.png)

근대 이 방법은 분산된 서비스 중 하나가 장애가 생기면

각각의 서비스에 동시에 Rocking이 걸리게 되고

성능의 문제가 발생하기 때문에 비효율적이다.

그래서…. 생겨난 것이 바로 SAGA 패턴이다.

즉, SAGA패턴이 무엇이냐면?

<aside>
🚀 마이크로 서비스들끼리 ***이벤트***를 주고 받아 특정 마이크로서비스에서 ***작업이 실패하면 이전까지의 작업이 완료된 마이크로 서비스들에게 보상 이벤트를 소싱함으로써 분산 환경에서 데이터 원자성을 보장***하는 패턴!

</aside>

### SAGA 패턴의 이벤트 성공 시 동작 흐름

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e907c094-7ca4-43c6-b747-7efa68aeca59/Untitled.png)

각 어플리케이션에서 트랜잭션이 성공하면(commit) **트랜잭션이 성공했다는**

**이벤트를 다른 어플리케이션으로 발행**하는 형태로 데이터의 정합성을 맞춘다.

### SAGA 패턴의 이벤트 실패 시 동작 흐름

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/adfa06d5-ba4f-4816-919c-636f7b7fde79/Untitled.png)

실패 역시 마찬가지다.

각각의 서비스들끼리 데이터 정합성이 맞아야 하기 때문에,

***어플리케이션끼리 트랜잭션 성공 or 실패에 대한 이벤트를 발행***하는데,

이때 만약 3번째 어플리케이션에서 트랜잭션이 실패가 됐다면

***트랜잭션이 실패가 됐다는 이벤트를 이전의 어플리케이션에 발행***해서

다시 해당 트랜잭션을 롤백시키는 형태이다.

마치 체인과 비슷하다.

### SAGA 패턴의 핵심

기존 모놀리틱 아키텍쳐와 달리 ***트랜잭선의 관리 주체가 DBMS에 있는 것이 아니라,***

***Application에 있다***는 것이다!

각 어플리케이션 하위에 존재하는 DB는 그 어플리케이션 내부의 로컬 트랜잭션만 담당한다.

이렇게 순차적으로 트랜잭션이 처리되고,

마지막 트랜잭션이 완전히 영속되었음을 확인하고 종료한다.

이 방법을 통해 데이터의 최종 일관성을 유지하게 된다.

### ****SAGA 패턴의 종류****

SAGA 패턴은 2가지로 나뉜다.

1. **Choreography based SAGA pattern**
2. **Orchestration based SAGA pattern**

****Choreography based SAGA pattern****

- 성공

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6a95cb2b-a3f5-44b3-8a46-450c8d0b8321/Untitled.png)

**각 서비스 내의 로컬 트랜잭션을 관리하고,**

**트랜잭션이 종료하게 되면 완료 이벤트를 발행**한다.

만약 그 다음 수행해야 할 트랜잭션이 있으면 해당 트랜잭션을 수행해야 하는

App으로 이벤트를 보내고, 해당 App은 완료 이벤트를 수신받고 다음작업을 진행한다.

이렇게 순차적으로 진행하고,

이 때 **이벤트는 Kafka와 같은 메세지 큐를 통해서 비동기 방식으로 전달**한다.

- 실패

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6466d26c-0a33-4bca-a5d4-a2f8bbc30996/Untitled.png)

즉, **Choreography based SAGA 패턴은 각 App 별로 트랜잭션을 관리하는 로직이 있다.**

이 로직을 통해 중간에 트랜잭션이 실패하면 

취소 처리를 실패한 App에서 보상 이벤트를 발행해서 롤백처리한다.

- 장점
    
    구성하기 편하다.
    

- 단점
    
    운영자 입장에서 트랜잭션의 현재 상태를 확인하기 어렵다.
    

**Orchestration based SAGA pattern**

- 성공

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/253f6f88-3692-4766-95bf-dc44a6ceaae5/Untitled.png)

**Orchestration based SAGA pattern 은 트랜잭션 처리를 위해** 

**SAGA 인스턴스 매니저가 별도로 존재**한다.

트랜잭션에 관여하는 모든 App은 Manager에 의해 점진적으로 트랜잭션을 수행하고

결과를 Manager에게 전달하고, 비지니스 로직 상 마지막 트랜잭션이 끝나면

Manager를 종료해서 전체 트랜잭션을 종료하낟.

만약 중간에 **실패가 나게되면 Manager에서 보상 트랜잭션을 발행해서 일관성을 유지**한다.

- 실패

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea899bc2-36f1-4587-b609-bc87c8f714b1/Untitled.png)

- 장점
    
    서비스간의 복잡성이 줄어들어서 구현 및 테스트가 쉬워진다.
    
    트랜잭션의 현재 상태를 Manager가 알고 있으므로 롤백하기 쉽다.
    

- 단점
    
    관리해야 하는 오케스트레이터 서비스(SAGA 인스턴스 매니저) 서비스를 추가해야 하기 때문에 인프라 구현이 복잡해진다.
    

## 결론

항상 SAGA 패턴이 좋을까?

No!

비즈니스 로직 상 **트랜잭션 처리가 반드시 필요할 경우에만 사용**하는 것이 좋다.

그렇지 않으면 여러곳에서 트랜잭션 처리 지옥을 경험할 수 있다.

# ref

---

[https://azderica.github.io/01-architecture-msa/](https://azderica.github.io/01-architecture-msa/)
