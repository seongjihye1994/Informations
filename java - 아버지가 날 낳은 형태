# java - 아버지가 날 낳은 형태

## 생성자

```java
class P {
	P() {System.out.println("A");}
	P(int a) {System.out.println("B");}
}

class **C extends P** {
	C() {System.out.println("C");}
	C(int a) {System.out.println("D");}
	C(int a, int b) {
			**super(a);**
			System.out.println("E");
	}
}
```

```java
P p1 = new C();
P p2 = new C(1);
P p3 = new C(1, 2);
```

생성자는 **자식을 먼저 찾아가**되, 자식 생성자 내부에서 

**부모를 명시적으로 호출(`super()`)하지 않으면** 

**부모의 디폴트 생성자를 먼저 호출**한 후 

그 **다음에 자식 생성자를 호출**해야 한다.

만약 **자식 생성자 내부에서 부모를 명시적으로 호출하고 있다**면, 

**파라미터에 맞는 부모 생성자를 찾아 호출하고, 그 다음 자식 생성자를 호출**한다.

- 답
    
    **A**
    
    **C**
    
    **A**
    
    **D**
    
    **B**
    
    **E**
    
- 해설
    
    new C() : 자식 생성자 호출
    
    C() 내부에 부모를 명시적으로 호출하지 않음
    
    부모의 디폴트 생성자 P() 호출
    
    A 출력
    
    이후 돌아와서 자식 생성자의 C 출력
    
    new C(1) : 자식 생성자 호출
    
    C(int a) 내부에 부모를 명시적으로 호출하지 않음
    
    부모의 디폴트 생성자 P() 호출
    
    A 출력
    
    이후 돌아와서 자식 생성자의 D 출력
    
    new C(1, 2) : 자식 생성자 호출
    
    c(int a, int b) 내부에 부모를 명시적으로 호출함
    
    부모의 파라미터 생성자 P(int a) 호출
    
    B 출력
    
    이후 돌아와서 자식 생성자의 E 출력
    

## 오버라이딩

```java
class P {
	public void func1() {System.out.println("A");}
	public void func2() {System.out.println("B");}
}

class **C extends P** {
	public void func1() {System.out.println("C");}
	public void func3() {System.out.println("D");}
}
```

```java
P p1 = new C();
p1.func1();
p1.func2();
p1.func3();
```

오버라이딩은, 부모가 가지고 있는 메소드를 자식에서 재정의 하는 것.

오버라이딩은 무조건 **자식을 호출**한다!

근대 만약 **자식에는 있지만, 부모에는 없는 메소드를**

**부모가 자식형태를 낳은 상태에서 호출하려고 한다면?**

**이 때는 에러!**

왜?? 부모가 가지고 있는 메소드를 자식이 재정의해서 사용하는 것이 오버라이딩인데,

애초부터 **부모가 가지고 있지 않은 메소드를 자식이 오버라이딩 할 수 없으니,**

**부모가 자식을 낳은 형태에서 부모가 가지지 않은 메소드를 호출하면**

**에러**가 나는 것.

- 답
    
    **C**
    
    **B**
    
    **Error**
    
- 해설
    
    p1.func1() 은 자식이 오버라이딩 함 : C 출력
    
    p1.func2() 는 자식이 오버라이딩 하지 않고 부모가 가지고 있음 : B 출력
    
    p1.func3() 은 부모는 없지만 자식만 가지고 있음 → 오버랑이딩 x : Error
    

## 하이딩

```java
class P {
	public static void func1() {System.out.println("A");}

}

class **C extends P** {	
	public static void func1() {System.out.println("C");}
}
```

```java
**P** p1 = new C();
p1.func1();
**C** p2 = new C();
p2.func1();
```

하이딩은 ‘`static`’ 키워드가 붙은 오버라이딩 형태

하이딩은 오버라이딩이 아니다!

그래서 오버라이딩처럼 접근하면 안됨.

그냥 부모 따로 자식 따로 각각 func1 메소드를 가지고 있는 형태임!!

static은 App이 구동됨과 동시에 heap 메모리에 객체가 생성되기 때문에

생성되지도 않은 객체의 멤버 메소드를 호출할 수 없음.

**static이 붙은 하이딩은 그냥 어떤 형태로 생성이 됐는지에 따라**

**그 생성된 형태의 메소드를 구현**하면 된다.

p1은 P로 생성됐으니 P 객체 내부의 A 출력

p2는 C로 생성됐으니 C 객체 내부의 C 출력

- 답
    
    **A**
    
    **C**
    
- 해설
    
    p1은 부모 형태 P 로 C를 생성함, `static` 키워드가 붙음 → 부모의 func1 호출 → A 출력
    
    p2는 자식 형태 C 로 C를 생성함, `static` 키워드가 붙음 → 자식의 func1 호출 → C 출력
    

## 멤버변수

```java
class P {
	public int a = 10;
	public void func1() {System.out.println(a);}
	public void func2() {System.out.println(a);}

}

class **C extends P** {	
	public int a = 10;
	public void func1() {System.out.println(a);}
}
```

```java
**P** p1 = new C();
p1.a = 20;
p1.func1();
p1.func2();
```

아버지가 날 낳은 형태로 멤버 변수가 같으면 (a 가 부모와 자식이 같음)

p1 은 부모의 a와 자식의 a를 둘 다 가지고 있게 된다.

그러면 둘 다 가지고 있는데 어떻게 호출해야 하냐?

**가까이 있는게 정답!**

즉, 부모가 자식을 낳았다 → 부모가 먼저임

p1.a 는 부모가 더 가까운것

그래서 부모의 멤버변수를 초기화 해야 한다!

a = 10 을 a = 20으로 바꾸기

- 답
    
    **10**
    
    **20**
    
- 해설
    
    p1은 부모 형태 P 로 C를 생성함, 형태가 부모이기 때문에 p1.a는 부모와 가깝다고 할 수 있음
    
    그래서 부모의 멤버변수 a를 20으로 초기화함
    
    p1.func1()은 부모가 가진 메소드를 자식이 오버라이딩 했으니 자식이 가진 메소드를 호출함
    
    → 10 출력
    
    p1.func2()은 자식에는 없고 부모에만 있으니 부모가 가진 메소드를 호출함
    
    → 아까 부모가 가진 a를 10에서 20으로 바꿨으니 20이 출력됨
    

## 정리

### 생성자

**자식 생성자 호출 → super()가 있다? 해당 부모 생성자 호출 → 이후 자식 생성자 호출**

**자식 생성자 호출 → super()가 없다? 부모 디폴트 생성자 호출 → 이후 자식 생성자 호출**

### 오버라이딩

부모와 자식이 공통으로 가지고 있는 상태에서, **자식걸 우선순위로 호출**한다.

**자식에는 없지만 부모에는 있다? → 에러 x, 부모거 호출하면 됨**

**자식에는 있지만 부모에는 없다? → 에러!!!**

### 하이딩

static 키워드가 붙음

**static이 붙은 하이딩은 그냥 어떤 형태로 생성이 됐는지에 따라**

**그 생성된 형태의 메소드를 구현**하면 된다.

p1은 P로 생성됐으면 P 객체 내부의 A 출력

p2는 C로 생성됐으면 C 객체 내부의 C 출력

### 멤버변수

아버지가 날 낳은 형태에서 아버지와 자식 모두 같은 멤버 변수를 갖고 있는데,

그 **공통의 멤버 변수를 초기화한다면, 무조건 부모가 가진 멤버 변수를 수정**해야 한다.

## ref

---

[https://www.youtube.com/watch?v=GS9Cr--ymVE&feature=share](https://www.youtube.com/watch?v=GS9Cr--ymVE&feature=share)
