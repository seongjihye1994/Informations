# Java 9 이후 deprecated된 Spring @PostConstruct와 @PreDestory 대안

### @PostConstruct와 @PreDestory

@PostConstruct : 빈 생성 후 실행될 로직 작성

@PreDestory : 빈 소멸 전 실행될 로직 작성

네이밍 만으로도 대충 무슨 역할을 하는지 알 수 있는 이 어노테이션들은

자바 9 이후로 밑줄이 쫙 그여졌고, 자바 11에서는 아예 제거될 예정..

쓰지 말라는건데..

그럼 비슷한 대안은 없는걸까?

### InitializingBean, DisposableBean 인터페이스 구현

이 두 인터페이스를 가지고 곧 소멸될 어노테이션들의 대안으로 사용할 수 있겠다.

***afterPropertiesSet()***과 ***destroy()*** 메서드를 오버라이딩해서 사용하자!

```java
@Service
public class UserServiceImpl implements UserService, InitializingBean, DisposabledBean {

		List<UserDto> users = new ArrayList<>();
	
		**// @PostConstructor 대체
		// InitializingBean 인터페이스 구현 메서드
		// UserServiceImpl 'Bean'이 생성될 때 마다 호출된다.**
		**@Override**
		public void **afterPropertiesSet()** throws Exceotion {
				 users = Arrays.asList(
							new UserDto("jihye", 29);
							new UserDto("young", 30);
							new UserDto("hee", 27);
							new UserDto("kh", 27);
		}
	
		**// @PreDestory 대체
		// DisposableBean 인터페이스 구현 메서드
		// UserServiceImpl 'Bean'이 소멸될 때 마다 호출되는 메서**
		**@Override**
		public void **destroy()** throws Exceotion {
				 users.empty();
		}
  
}
```

아래 코드는 추가적으로 이해를 위해 적은 예시이다.

```java
package com.example.demo.service;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.stereotype.Service;

@Service
public class TestService implements **CommandLineRunner, ApplicationListener<ContextClosedEvent>, InitializingBean, DisposableBean** {

    @PostConstruct
    private void init() {
        System.err.println("PostConstruct annotation으로 빈이 완전히 생성된 후에 한 번 수행될 메서드에 붙입니다.");
    }

    @Override
    public void run(String... args) throws Exception {
        System.err.println("commandLineRunner 인터페이스 구현 메서드입니다. '애플리케이션'이 실행될 때 '한 번' 실행됩니다.");
    }

    @Override
    public void onApplicationEvent(ContextClosedEvent event) {
        System.err.println("ApplicationListener<ContextClosedEvent> 인터페이스 구현 메서드 입니다. '애플리케이션'이 죽었을 때 '한 번' 실행됩니다.");
        System.err.println("이벤트 발생 시간(timestamp) : " + event.getTimestamp());
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.err.println("InitializingBean 인터페이스 구현 메서드입니다. TestService 'Bean'이 생성될 때 마다 호출되는 메서드 입니다.");
    }

    @Override
    public void destroy() throws Exception {
        System.err.println("DisposableBean 인터페이스 구현 메서드입니다. TestService 'Bean'이 소멸될 때 마다 호출되는 메서드입니다");
    }
}

```

# ref

---

출처: [https://wedul.site/445](https://wedul.site/445) [wedul:티스토리]

출처: [https://jeong-pro.tistory.com/179](https://jeong-pro.tistory.com/179) [기본기를 쌓는 정아마추어 코딩블로그:티스토리]
