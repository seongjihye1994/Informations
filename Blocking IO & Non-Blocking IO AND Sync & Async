# Blocking IO & Non-Blocking IO / Sync & Async

# Blocking IO VS Non-Blocking IO

## Blocking IO

자신의 작업을 진행하다가 다른 주체의 작업이 시작되면 다른 작업이 끝날 때 까지

***기다렸다***가 자신의 작업을 시작하는 것.

널널한 개발자 아저씨가 항상 하는 말..

컴퓨터의 세상은 유저모드와 커널모드로 나뉜다.

**유저모드**

---

**커널모드**

쓰레드 하나가 유저 모드에서 IO (입출력) 작업을 수행하려고 한다.

그래서 커널모드의 OS에게 IO 작업 요청을 한다.

```
👱 유저모드 쓰레드 : 야, OS야. 나 입출력 할거야.

🦖 커널모드 OS : 알았다. 시간 좀 걸리니 기다려보시게.

👱 유저모드 쓰레드 : (**OS가 IO 작업을 완료할 때 까지 관심을 가지고 기다린다…**)

											(잠시 후…)

🦖 커널모드 OS : 야 쓰레드야, IO 작업 완료했다.

👱 유저모드 쓰레드 : ㅇㅋ, ㄱㅅ (대기를 끝낸다.)
```

👆 이렇게 **Blocking은 쓰레드가 OS에 IO 작업을 요청하고, OS가 IO작업을 완료할 때 까지**

**다른 일을 하지 않고 무한정 기다린다.**

좀 더 쉬운 예시를 들어보자.

IO 주식회사에 직원과 상사가 있다.

직원은 상사에게 서류를 전달해야 한다.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 제가 이 서류 볼때까지 어디 가지마시고 기다리세요.

👱 직원 : (**상사가 서류를 다 볼 때 까지 관심을 가지고 기다린다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤으니 일하러 가세요.

👱 직원 : ㅇㅋ
```

이게 바로 Blocking이다.

직원은 실제로 일이 겁나 많은데, 상사가 서류를 다 볼 때 까지 자리로 가지도 못하고

상사의 데스크 앞에서 **상사가 서류를 다 볼 때 까지 무한정 기다린다.**

멀쩡한 쓰레드는 다른 일을 하지 못하고 계속 대기해야 하니, **쓰레드 낭비** 생긴다.

이제 Non-Blocking IO를 보자.

## Non-Blocking IO

다른 주체의 작업에 ***상관없이*** 자신의 작업을 수행하는 것.

역시나 예시로 알아보자.

**유저모드**

---

**커널모드**

```
👱 유저모드 쓰레드 : 야, OS야. 나 입출력 할거야.

🦖 커널모드 OS : 알았다. 시간 좀 걸리니 가서 다른 일 좀 보시게.

👱 유저모드 쓰레드 : ㅇㅋ **끝나면 연락줘. (다른 작업 하러 감)**

											(잠시 후…)

🦖 커널모드 OS : 야 쓰레드야, IO 작업 완료했다.

👱 유저모드 쓰레드 : ㅇㅋ, ㄱㅅ (**멀티 쓰레드라면 어떤 쓰레드가 올지 모름!**)
```

좀 더 쉬운 예시를 들어보자.

IO 주식회사에 직원과 상사가 있다.

직원은 상사에게 서류를 전달해야 한다.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 다 보면 알려드릴테니 가서 일하고 계세요.

👱 직원 : ㅇㅋ (**돌아가서 다른 일을 진행한다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다.

👱 직원 : ㅇㅋ (**멀티 쓰레드라면 어떤 쓰레드가 올지 모름!**)
```

## Blocking IO VS Non-Blocking IO 차이

<aside>
🚀 다른 주체가 작업할 때 **자신에게 제어권이 있는지, 없는지를 판단**하는 기준이다.

</aside>

---

# Synchronous VS Asyncronous

## Synchronous

**동기**라는 뜻

작업을 동시에 수행하거나, 동시에 끝나거나, **끝나는 동시에 시작함을 의미**한다.

역시나 예시로 알아보자.

**유저모드**

---

**커널모드**

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 다 보면 알려드리겠습니다.

👱 직원 : ㅇㅋ (**돌아가서 다른 일을 진행하거나, 하지 않을 수도 있다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다. 가져가세요.

👱 직원 : ㅇㅋ (**상사가 건내준 서류를 받아서 "해당 일을 바로 처리"**한다.)
							 (**멀티 쓰레드라면 어떤 쓰레드가 올지 모름!**)
```

상사가 서류를 다 보고 난 후 건내준 서류를 받아 **바로 해당 일을 처리**한다.

핵심은 “**바로 처리**”에 있다.

syncronous 는 커널 영역에서 결과를 받은 즉시, **해당 작업을 이어받아 바로 처리**한다!

## Asyncronous

**비동기**라는 뜻

시작, 종료가 일치하지 않으며, **끝나는 동시에 시작을 하지 않음**을 의미한다.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 다 보면 알려드리겠습니다.

👱 직원 : ㅇㅋ (**돌아가서 다른 일을 진행하거나, 하지 않을 수도 있다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다. 결과는 메일로 알려드릴게요.

👱 직원 : ㅇㅋ (**상사가 건내준 메일을 받아 해당일을 "바로 처리하지 않을 수"도 있다.**)
							 (**멀티 쓰레드라면 어떤 쓰레드가 올지 모름!**)
```

상사가 서류를 다 보고 난 후 건내준 서류를 받아 해당 일을 **바로 처리할 수도, 바로 처리 하지 않을 수**도 있다.

핵심은 “**바로 처리 하지 않을 수**”에 있다.

asyncronous 는 커널 영역에서 결과를 받은 후, 해당 결과를 가지고 **해당 작업을 이어받아 바로 처리 할 수도, 바로 처리 하지 않을 수도 있다.**

## Synchronous IO VS Asyncronous 차이

<aside>
🚀 결과를 돌려주었을 때 **순서와 결과에 관심이 있는지 아닌지**로 판단한다.

</aside>

위에서 배운 4가지를 같이 정리해서 알아보자.

|  | Blocking (제어권 관점) | Non-Blocking (제어권 관점) |
| --- | --- | --- |
| Sync (순서/결과 관점) | 기다림 / 결과를 받아 바로 처리 | 기다리지 않음 / 결과를 받아 바로 처리 |
| Async (순서/결과 관점) | 기다림 / 결과를 받아 바로 처리 or 바로 처리 x | 기다리지 않음 / 결과를 받아 바로 처리 or 바로 처리 x |

# 정리

### Blocking

OS의 작업이 끝날 때 까지 **기다림**

### Non-Blocking

OS의 작업이 끝날 때 까지 **기다리지 않음**

### Syncronous

OS가 끝낸 작업을 가지고 **바로 해당 일을 처리**함

### Asyncronous

OS가 끝낸 작업을 가지고 **바로 해당 일을 처리 할 수도, 처리 하지 않을 수도** 있음

### Blocking 과 Syncronous

OS의 작업이 끝날 때 까지 기다리면서 + OS가 끝낸 작업을 가지고 바로 해당 일을 처리함

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 서류 다 볼 때 까지 앞에서 기다리세요.

👱 직원 : ㅇㅋ (**상사가 서류를 모두 다 볼 때 까지 기다린다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다. 가져가세요.

👱 직원 : ㅇㅋ (**상사가 건내준 서류를 가지고 해당 일을 바로 처리한다.**)
```

### Non-Blocking 과 Syncronous

OS의 작업이 끝날 때 까지 기다리지 않으면서 + OS가 끝낸 작업을 가지고 바로 해당 일을 처리함

즉, 이 때는 OS의 작업이 끝날 때 까지 기다리지 않지만, OS가 끝낸 작업에 대한 결과는 관심이 있기 때문에 **자기 자리로 돌아갔지만 계속해서 OS에게 결과가 끝났는지 물어보러 오게된다.**

이후, **OS가 일을 처리하면 해당 업무를 이어받아 바로 처리**한다.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 다 보면 알려드릴테니 다른 작업 하고 계세요.

👱 직원 : ㅇㅋ (**자리로 돌아가 다른 작업을 한다.**)
					(하지만 **직원은 상사가 서류를 다 읽었는지 궁금하기 때문에 계속 상사 자리로 와서
					다 끝났는지 물어본다.**)

👱 직원 : 상사님, 다 보셨나요?

🦖 상사 : 아직이요.

👱 직원 : 상사님, 지금은 다 보셨나요?

🦖 상사 : 아직이요.

👱 직원 : 상사님, 지금은요?!

🦖 상사 : 네 이제 다 봤습니다. 가져가세요.

👱 직원 : ㅇㅋ (**상사가 건내준 서류를 가지고 해당 일을 바로 처리한다.**)
```

### Blocking 과 Asyncronous

OS의 작업이 끝날 때 까지 기다리면서 + OS가 끝낸 작업을 가지고 해당 일을 바로 처리할 수도, 처리하지 않을 수도 있음.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 제가 서류를 다 볼 때 까지 앞에서 기다리세요.

👱 직원 : ㅇㅋ (**관심이 없는데 기다린다.**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다. 결과는 메일로 알려드릴게요.

👱 직원 : ㅇㅋ (**상사가 건내준 서류를 가지고 해당 일을 바로 처리 할 수도,
								처리 하지 않을 수도 있다.**)
```

이 조합 뭔가 이상하다.

상사는 계속해서 직원에게 본인이 서류를 다 볼 때 까지 굳이 기다리라고(Blocking) 하지만,

상사가 서류를 다 보고 난 후 결과를 가지고 바로 직원이 일을 처리하지 않을(Asyncronous) 수도 있다.

그래서 이 조합은 사용하면 안된다.

자원 낭비 + 대기 시간 소모로 좋지 않은 현상이다.

### Non-Blocking 과 Asyncronous

OS의 작업이 끝날 때 까지 기다리지 않으면서 + OS가 끝낸 작업을 가지고 해당 일을 바로 처리할 수도, 처리하지 않을 수도 있음.

```
👱 직원 : 상사님, 서류 가져왔습니다.

🦖 상사 : 알았습니다. 다 보고 알려드릴테니 다른일 하고 계세요.

👱 직원 : ㅇㅋ (**돌아가서 다른 일 처리중..**)

					(잠시 후…)

🦖 상사 : 네 이제 다 봤습니다. 결과는 메일로 알려드릴게요.

👱 직원 : ㅇㅋ (**상사가 건내준 서류를 가지고 해당 일을 바로 처리 할 수도,
								처리 하지 않을 수도 있다.**)
```

직원은 상사가 서류를 다 볼 때 까지 굳이 앞에서 기다릴 필요도 없고(Non-Blocking)

돌아가서 다른 일을 처리할 수 있다.

또한, 상사 역시 본인이 서류를 다 보면 직원에게 메일로 결과를 알려주면 되기 때문에

**서로 같은 시간에 다른 작업을 할 수 있다! (효율성 UP UP)**

# ref

---

[https://www.youtube.com/watch?v=XNGfl3sfErc](https://www.youtube.com/watch?v=XNGfl3sfErc)

[https://www.youtube.com/watch?v=oEIoqGd-Sns](https://www.youtube.com/watch?v=oEIoqGd-Sns)
