# IPC (Inter Process Communication)

주로 하나의 Local 머신에서 두 프로세스간 통신하는 방법에 대한 얘기이다.

로컬 머신이니, 통신할 때 네트워킹을 안한다.

네트워크를 타지 않는다.

# 종류

## 전통적인 메모리 기법

### 1. 공유 메모리 기법 (버추얼 메모리 이용)

가장 흔한 기법

Process는 가상 메모리 환경에서 독립된 공간을 제공받는다.

다른 프로세스가 다른 프로세스의 가상 메모리를 침범하지 않도록 os가 제어한다.

프로세스1이 사용하는 가상메모리가 있고, 프로세스2가 사용하는 가상 메모리가 있는데,

각각 프로세스가 상대방의 가상메모리를 침범하게 되면 침범한 프로세스는 죽어버린다.

공유 메모리 기법이란,

프로세스 1의 가상 메모리와 프로세스2의 가상 메모리가 서로 이어져 있는 상태이다.

프로세스 1이 write를 하면 프로세스2에서 read할 수 있고, 반대로도 가능하다.

양방향으로 정보를 주고 받을 수 있다.

장점은??

네트워크를 타지 않고, 서로 가상 메모리가 이어져 있기 때문에 속도가 빠르다.

단점은??

용량제한 문제

한 번에 스트리밍 형식으로 보내기가 힘들다.

속도 빠른거 빼고는 공유 메모리가 딱히 좋은점이…

### 2. 메세지 전달 기법

1. 시그널 (리눅스)
    
    윈도우에서는 Event
    
    리눅스에서는 Signal
    
    이라고 부름.
    

1. 파이프
    
    프로세스 1이 파일에다 대고 write 하면 프로세스 2는 파일에다 대고 read 한다.
    
    파이파는 단방향이다.
    
    빨대를 생각하면 쉽다.
    
    양방향으로 하고 싶다면, 파이프를 두개 만들자.
    
    읽기전용 파이프 하나, 쓰기전용 파이프 하나
    
    파이프 역시 로컬 머신으로 네트워킹을 하지 않기 때문에 속도는 빠르겠져?
    
    하지만 파일 입출력은 메모리 입출력에 비해 속도는 떨어진다.
    
    하지만, 공유 메모리에서는 하지 못했던 스트리밍 읽기가 쉬워진다.
    
2. 소켓
    
    소켓은 기본적으로 양방향이다.
    
    파이프와의 차이점이다.
    
    그럼 소켓이 파이프보다 좋다???
    
    소켓은 어쨌든 커널 영역의 tcp, udp 네트워크를 타게 된다.
    
    그 부분에 대해서는 딱히 좋다고는 할 수 없다.
    
    그래서 이 소켓의 커널 영역 네트워크를 타는 단점과 파이프의 단방향 단점을 보완한게 UDS 이다.
    
    유닉스 도메인 소켓이라고 함.
    
    유닉스 도메인 소켓이 뭐냐?
    
    tcp/ip 소켓이 아이피 주소와 포트를 이용해 접속하듯 유닉스 도메인 소켓은 파일을 이용한다.
    
    mysql.sock 이라는 것이 바로 이 용도로 사용되는 파일이다.
    
    따라서 mysql을 실행시켰을 때는 muysql.sock 파일이 있지만, 중지시키면 이 파일은 사라진다.
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c4d1de9-0663-40ba-865f-c98a86b7f5c8/Untitled.png)
    
    # ref
