# CDN과 GSLB

# CDN

Content Delivery Network

전 세계에 여러군데 분산되어 있는 서버 네트워크다.

진짜 물리적으로 분산되어 있음.

그러니까, 내가 GOOGLE을 이용하는데, 

구글의 CDN 여러개 중 한국에도 CDN이 있다고 가정하면

내가 GOOGLE을 접속한다? 

보통은 다 한국에 있는 CDN으로 요청이 들어가고, 응답이 온다고 할 수 있겠다.

미국 저 멀리에 구글 오리진 서버가 있는데,

내가 미국 오리진 서버에 접속하는 것 보다, 한국에 분산되어 있는 거점 서버에 접속해서

정보를 가져오면 훨씬 빠르겠쥬?

맞는 비유인지는 모르겠는데,

프렌차이즈 느낌이라고 보면 되겠다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a420126-1e08-4546-9fe0-ffbd8008dfc2/Untitled.png)

그림처럼 미국에 사는 사용자가 중국에 있는 컨텐츠를 가져온다고 하면 

거리가 멀기 때문에 느리고 국제 회선을 사용해서 비용 또한 비싸진다.

CDN을 사용하면 미국의 CDN 서버에 복사를 해서 미국에 있는 사용자의 요청을

미국 CDN으로 연결하기 때문에 비용이나 속도를 보장할 수 있다.

그리고 중요한 장점 한가지 더!

서버가 여러대로 스케일 아웃 되어 있으니, 한대의 CDN 서버가 장에가 나도, 

다른 CDN 서버가 대응 해 줄 수 있게 때문에 안정성도 보장된다.

## CDN의 장점

1. 사용자의 지리적 위치와 가까운 CDN 서버에서 응답이 오기 때문에 빠르다.
2. 네트워크 비용도 저렴하다.
    1. 여기서의 저렴은 성능상의 저렴이다.
3. 여러 서버로 스케일아웃 되어있기 때문에 안정성도 보장된다.

## CDN의 목적

CDN의 목적은 장점에서도 볼 수 있지만, 원래 목적은

사이트의 **정적 컨텐츠( 예를들면 이미지, CSS, JS 파일, 구성 요소 등)를 캐시하는 것**이다.

사용자가 사이트를 요청을 하면 사용자에게 가장 가까운 노드(서버)가 응답해준다.

→ 사용자의 대기 시간을 줄이고, 사이트 로딩을 빠르게 제공함.

따라서 CDN은 캐시기능이 존재한다.

마치 프록시와 유사하다.

해외에서 요청이 들어오면 CDN 노드(서버)에 기존에 방문한 기록이 있으면

그 노드에서 바로 처리해서 보여준다.

이게 어떻게 가능할까?

GSLB에 해답이 있다.

# GSLB

Global Server Load Balancing

로드밸런싱???

로드밸런싱 때문에 뭔가 로드밸런싱에서 발전된건가? 하겠지만.. 그건 아니고

**DNS 서비스의 발전된 형태**라고 보면 되겠다.

DNS 서비스는 도메인 이름을 IP 주소로 변환하는 일을 하는 건 다 알고있겠져?

근대 하나의 도메인 주소에 대해 여러개의 IP 주소를 넘겨줄 수 있는것도 알고 있는가?

이 기능을 사용해서 가용성 구성과 로드밸런싱 기능을 수행할 수 있다.

근대 가용성 구성이랑 로드밸런싱이 본 기능은 아니라 이 목적으로 사용하기에는…한계가 있음…

또르륵…

대충 예를 들어보면,

클라이언트가 DNS에 질의를 할 경우(IP 요청을 할 경우), DNS 서버는 로컬 데이터베이스의 IP 목록을 확인해서 그 중 하나를 반환할 뿐,

네트워크 지연, 성능, 트래픽 유입, 서비스 실패 등은 전-혀 고려하지 않는다.

이런 한계에도 불구하고 인터넷 영역에서 로드밸린싱을 할 수 있다는 장점이 있긴 하다!

지역을 뛰어넘는 넓은 영역에서의 로드밸린싱 및 가용성 구성을 위한 좋은 솔루션이 되는데

이를 위해서는 몇 가지 문제들을 해결해야 한다.

이 문제를 해결한게 GSLB 이다.

정리하자면,

DNS의 단점을 보완한 것이 GSLB 이다.

그럼 어떤 차이가 있을까?

# DNS와 GSLB의 차이점

## 1. 재해 복구

DNS는 서버의 상태를 알 수 없어서 서비스를 실패하는 유저가 생길 수 있다.

하지만,

GSLB는 서버의 상태를 모니터링 하고 실패한 서버의 IP는 응답에서 제외한다.

그래서 유저는 서비스를 계속 이용할 수 있다.

DNS 는 UDP 같고 GSLB는 TCP 같군여;;

## 2. 로드밸런싱

DNS 는 Round Robin 방식을 사용한다.

그래서 정교한 로드밸런싱이 힘들다고 함.

라운드 로빈에 대해서는 아래 링크를 참조하자.

[https://velog.io/@eu_nzi/네트워크-DNS-round-robin의-방식](https://velog.io/@eu_nzi/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-DNS-round-robin%EC%9D%98-%EB%B0%A9%EC%8B%9D)

반면 GSLB는 서버의 로드를 모니터링하기 때문에

로드가 적은 서버의 IP를 반환하는 식으로 정교한 로드밸런싱이 가능하다.

ㅈㄴ 짱짱맨이네?

## 3. 레이턴시 기반 서비스

DNS는 라운드 로빈 방식을 사용한다.

그래서 유저는 네트워크 상에서 멀리 떨어진 위치의 서버로 연결할 수도 있다.

GSLB는 각 지역별로 서버에 대한 레이턴시(latency)정보를 가지고 있다.

그래서 유저가 접근을 하면, 유저의 지역으로부터 가까운 (더 작은 레이턴시를 가지는) 

서버로 연결한다.

그러니까, dns는 그냥 저 멀리 떨어진 서버에 연결 해주는 반면

GSLB는 물리적으로 가까운 곳으로 연결해주는군…

그럼 속도도 더 빨라지고, 네트워크 비용도 싸지겠네?!

## 4. 위치기반 서비스

DNS에서 유저는 라운드 로빈하게 서버로 연결된다.

GSLB는 유저의 지역 정보를 기반으로, 해당 지역을 서비스하는 서버로 연결할 수 있다.

이건 3번이랑 비슷하군.

# GSLB 기술

## 1. helty check

GSLB는 등록된 호스트들에 대해서 주기적으로 헬스체크를 수행한다.

호스트가 실패하면 DNS 응답에서 해당 호스트를 제거한다.

실패한 호스트로의 접근을 막기 때문에 서버의 가용성을 높일 수 있다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ac828b7c-492d-49d4-b636-d8d94051c291/Untitled.png)

그림을 보면 사용자 요청이 들어올 때 헬스체크를 하는 것 처럼 보이는데,

사실은 요청이 없어도 주기적으로 헬스 체크를 해서 서버 목록을 갱신한다고 한다~~~!

부지런타~~

## 2. TTL

DNS 에서 권한을 가진 네임서버는 특정 레코드에 대해서 TTL을 설정할 수 있다.

[TTL (Time To Live)](https://www.notion.so/TTL-Time-To-Live-efd6d101cb3b4f748d5eef0803adf794) 은 여기서 확인 ㄱㄱ

캐시 네임서버는 TTL 시간동안 캐시에 저장하고 클라이언트로부터 요청이 오면 캐시에 저장된 걸 반환한다.

만약 TTL 값이 지나치게 길면 GSLB의 상태정보가 제대로 동기화 되지 않고

TTL 값이 지나치게 짧으면 네임서버에 가해지는 부담이 커진다.

GSLB와 같이 주소 변경에 민감한 서비스라면 부하를 감수하고도 TTL값을 짧게 가져가야 한다.

## 3. 네트워크 거리 & 지역

주기적으로 성능을 측정하고 결과를 저장한다.

DNS 질의가 오면, 지리적으로 가까운 서버를 반환하거나

네트워크 거리가 가까운 서버를 반환한다.

지리적으로 가까운 서버의 경우 RTT(Round Trip Time)도 짧기 때문에

네트워크 거리가 가까운 경우와 동일한 결과를 반환하는 경우가 많다.

GSLB는 Local name server와 Second Level name server 사이에 위치해 있다.

# ref

---

[https://brownbears.tistory.com/408](https://brownbears.tistory.com/408)

[https://yjksw.github.io/cdn/](https://yjksw.github.io/cdn/)
