# DB 정리 (DriverManager, Connection Pool, DataSource)

클라이언트 - app 서버 - db

app 서버에서 db에 데이터를 요청할때는

1. 커넥션 연결
2. 쿼리 전달
3. DB가 데이터 app서버로 전달

이런 과정을 거치는데,
문제는 DB마다 app 서버에서 데이터를 요청하는 과정과 방식이 다르다는 것.

DB 제조사마다 데이터를 요청하는 방법이 모두 다르다면?

내 프로젝트에서 원래는 오라클DB를 썼지만,
갑자기 Mysql로 바꿔야 한다면, 기존에 오라클 db를 연결할 때 사용했던 app 서버 로직을 mysql로 일일이 다 바꿔야 한다는 번거로움이 있다.

그리고 개발자가 바뀌는 DB의 연결 로직 등을 모두 다시 학습해야 함.

이 문제를 해결하기 위해?
-> JDBC를 사용.

app 서버에서 db에 데이터를 요청할 때, 바로 db에 냅다 요청하는게 x
중간에 jdbc 인터페이스를 통해서 요청한다.

즉, app 서버 - jdbc 인터페이스 - db

이 순서인데,  이 jdbc 인터페이스를 사용하면 맨 뒷단에 있는 db가 오라클에서 갑자기 mysql로 바껴도 아무 문제가 없다.

jdbc 인터페이스가 알아서 해당 db에 해당하는 연결 로직을 모두 알고있기 때문!

JDBC 드라이버란??
JDBC 인터페이스를 DB 벤더들이 자신의 DB에 맞도록 구현해서 라이브러리로 제공함

예시로,
만약 MysqlDB를 사용한다?
클라이언트 - app 서버 - **jdbc 인터페이스 - mysql 드라이버 - mysql db** (mysql 연결 - sql 전달 - 결과 응답)

또는 오라클을 사용한다면?
클라이언트 - app 서버 - **jdbc 인터페이스 - 오라클 드라이버 - orcle db** (oracle 연결 - sql 전달 - 결과 응답)

요러케..

JDBC가 제공하는 DriverManager??

라이브러리에 등록된 각각의 DB 드라이버들을 관리하고 커넥션을 획득하는 기능을 제공

클라이언트 - app 서버 - jdbc 인터페이스 - **각 db에 맞는 드라이버 - db (db 연결**, sql 전달, 데이터 응답)

굵은 볼드체 부분이 jdbc driver manager 가 하는 일임.
각 db에 맞는 드라이버들을 관리하고,
각 db에 커넥션을 맺어준다.

JDBC 드라이버의 한계

근대 여기에 문제가 있다.
바로 클라이언트의 요청이 올 때마다 매번 jdbc 드라이버에서 db와의 커넥션을 맺는다는 것,

즉, jdbc 드라이버를 거친 후 해당 db로부터 연결을 시도하는데 이 때 connection 객체를 생성한다.
그러니까 고객이 db에 데이터를 요청 할 때마다 jdbc 드라이버는 db와의 커넥션을 계속 새로 맺어서 새로운 객체를 생성해버림~~~

요청이 적으면 괜찮지만 많으면 서버가 과부하로 죽을 수 있다.

그래서 생겨난 개념이 바로 connection pool

jdbc 드라이버와 db와의 커넥션을 미리 맺어놓고,  connection pool에다 담아놓은 후, 클라이언트 요청이 올 때마다 이 pool 에서 가져다 쓰고 반납하는 것.

미리 만들어놓기 때문에 고객의 요청이 올 때마다 생성하지 않아서 서버가 과부하 걸릴 일이 x

이 커넥션 풀을 만들어서 사용해도 되지만,
오픈소스로 잘 나와있는게 많다~
대표적인게 히카리 커넥션풀
아주아주 좋아버린 나머지 스프링부터 2.0부터는 기본 장착됨

SQL Mapper 는 JDBC를 편리하게 사용하도록 도와주는 라이브러리이다.

대표적인 예로 JDBC Template, MyBatis 가 있다.

ORM : 객체 - DB 테이블 매핑

app 서버와 db의 커넥션을 맺는 방법 여러개

1. Jdbc Driver Manager
-> 이게 뭐였냐? 각각의 db에 해당하는 연결 방법을 모아놓은 jdbc 드라이버를 관리하고, 해당 db에 연결(커넥션 객체 생성) 해주는 좋은 친구
2. 일반적인 커넥션 풀
dbcp라고 하는데 이건 좀 찾아보자.
3. 히카리 커넥션 풀
오픈소스로 성능도 킹왕짱이라 스프링부트 2.0 부터는 기본 장착된 녀석임

위에도 설명 했듯이,
jdbc 드라이버 매니저를 쓰면 클라이언트 요청이 있을 때마다 db 커넥션을 매번 맺고 생성한다 - 서버 과부하

커넥션 풀 - app 기동될 때 db 커넥션 설정해놓은 만큼 다 만들어 놓고 가져다 쓰고 반납하는 형태
-> 히카리 cp 가 성능이 좋아서 대부분 이거 씀

아니 그러면 딱봐도 히카리 cp 쓰는게 좋아 보임.

jdbc driver manager 에서 커넥션 풀로 바꾸고 싶은데 우째함미까?
app 서버 코드 로직 바꿔야함

아니 로직 바꾸려면 겁나 빡칠것 같은데욤..

그래서 커넥션을 획득하는 방법(jdbc driver manager, dbcp, hikari...) 자체를 추상화 해놓음.
커넥션 획득 방법 자체를 바꿀 때마다 갈아끼우면 되겠네.

이거 어케함???
DataSource 로 한다!!

DataSource
DB 커넥션 획득 하는 방법 자체를 추상화 해 놓은 인터페이스

얘는 커넥션 방법을 조회하는 친구임~

대부분 커넥션 풀은 DataSource 인터페이스를 이미 구현해둠
그래서 가져다 쓰면 되는데,

Jdbc Driver Manager 는 아니다..
겁나 오래된 기술이라 그런지 그딴거 없음 시전

그럼 우짠다 ㅠ?
코드를 고쳐야지 모..

근대 스프링을 사용한다면?

스프링은 Driver Manager도 DataSource를 사용할 수 있도록 DriverManagerDataSource 라는 DataSource를 구현한 클래스를 제공한다!

스프링 짱짱
